out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
out = a & b & c
total = (x - 1) + 3 + 2
val = 1023u10bits
foo.__bits = 3
foo = 7
bar as (__bits = 10)
bar = 123
func_xor = :($a, $b, $valid, %out) when $valid:{
  %out = $a ^ $b
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}

my_xor = func_xor(a = $foo, b = $bar)
%out = my_xor.out
for i in (0..3) {
  tuple_foo[i] = tuple_bar[3-i]
}
if a > 10 {
  b = 3 
} elif a < 1 {
  b = 2
} else {
  b = 1
}
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
my_xor = func_xor($foo, $bar)
%out = my_xor.out
func_xor = :($a, $b, %out):{
  %out = $a ^ $b
}
if a > 3 {
  b = a + 1
}
tup = (foo = 1, bar = cat + 2)
tup = (foo = 1, bar = cat + 2) 
tup = tup ++ (4, dog)
%out = !$inp
while (tup_foo[i] > 2) {
  tup_foo[i] = tup_bar[3-i]
}
